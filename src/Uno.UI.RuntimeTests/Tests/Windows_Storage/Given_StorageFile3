using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Windows.ApplicationModel.Resources;
using Windows.ApplicationModel.Resources.Core;

// Given_StorageFile3 , as Given_StorageFile is used in PR#2407, and Given_StorageFile2 in PR#2449

namespace Uno.UI.RuntimeTests.Tests
{
    [TestClass]
    public class Given_StorageFile3
    {
        String _filename;
        
        [TestInitialize]
        public void Init()
        {
            _filename = DateTime.Now.ToString("yyyyMMddHHmmss") + ".txt";
        }

        [TestCleanup]
        public void Cleanup()
        {
        }

        [TestMethod]
        public async void When_DateModified()
        {
            var folderForTestFile = Windows.Storage.ApplicationData.Current.LocalFolder;
            Assert.IsNotNull(folderForTestFile, "cannot get LocalFolder - error outside tested method");

            Windows.Storage.StorageFile testFile = null;
            
            try
            {
                testFile = await folderForTestFile.CreateFileAsync( _filename, Windows.Storage.CreationCollisionOption.FailIfExists);
                Assert.IsNotNull(testFile, "cannot create file - error outside tested method");
            }
            catch
            {
                  Assert.Fail("CreateFile exception - error outside tested method");
            }

            DateTimeOffset dateBeforeModify = DateTimeOffset.Now;

            // test of DateModified

            // first, some wait - to be sure that returned date is not simply 'current date' or 'creation date'
            // e.g. FAT has two seconds resolution - so wait should be longer
            await Task.Delay(5000);


            Stream fileStream = await testFile.OpenStreamForWriteAsync();
            fileStream.Seek(0, SeekOrigin.End);
            StreamWriter streamWriter = new StreamWriter(fileStream);
            streamWriter.Write(_filename);  // anything - just write String
            streamWriter.Dispose();
            fileStream.Dispose();

            DateTimeOffset dateAfterModify = DateTimeOffset.Now;

            DateTimeOffset dateModified = DateTimeOffset.Now; // unneeded initialization - just to skip compiler error of using uninitialized variable
            try
            {
                  dateModified = (await testFile.GetBasicPropertiesAsync()).DateModified;
            }
            catch
            {
                Assert.Fail("DateModified exception - error in tested method");
            }

           dateBeforeModify = dateBeforeModify.AddSeconds(-2);
           dateAfterModify = dateAfterModify.AddSeconds(2);
      
            // check if method works
           if(dateModified < dateBeforeModify)
           {
                Assert.Fail("DateModified: too early - method doesnt work");
           }

           if(dateModified > dateAfterModify)
           {
                Assert.Fail("DateModified: too late - method doesnt work");
           }
           
           // last test - compare with date created
           // would work only after merging PR#2449 
           // DateTimeOffset dateOnCreating = DateTimeOffset.Now; // unneeded initialization - just to skip compiler error of using uninitialized variable
           // try
           // {
           //       dateOnCreating = testFile.DateCreated;
           // }
           // catch
           // {
           //     Assert.Fail("DateCreated exception - error outside tested method");
           // }
        }
    }
}
