using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Uno.Extensions;

namespace Uno.UWPSyncGenerator
{
	/// <summary>
	/// Generates documentation about what parts of the UWP contract are currently implemented by Uno.
	/// </summary>
	class DocGenerator : Generator
	{
		private const string DocPath = @"..\..\..\..\..\doc\articles";
		private const string ImplementedViewsFileName = "implemented-views.md";
		private const string ImplementedMembersPrefix = "implemented-view-members-";

		private MarkdownStringBuilder _sb;
		private List<PlatformSymbols<INamedTypeSymbol>> _views;
		private IGrouping<INamespaceSymbol, PlatformSymbols<INamedTypeSymbol>>[] _viewsGrouped;
		private HashSet<(string name, string namespaceString)> _kosherFrameworkViews;

		public override void Build(string basePath, string baseName, string sourceAssembly)
		{
			_sb = new MarkdownStringBuilder();

			_sb.AppendComment($"*** This file has been generated by {typeof(DocGenerator).FullName}, do not edit manually. ***");
			_sb.AppendLine();

			_views = new List<PlatformSymbols<INamedTypeSymbol>>();
			base.Build(basePath, baseName, sourceAssembly);

			_viewsGrouped = GroupByNamespace(_views);
			_kosherFrameworkViews = new HashSet<(string name, string namespaceString)>(_views.Select(ps => (ps.UAPSymbol.Name, ps.UAPSymbol.ContainingNamespace.ToDisplayString())));

			using (_sb.Section("List of views implemented in Uno"))
			{
				_sb.AppendParagraph("All views in the UWP API are listed here according to whether they have been implemented for Uno. The implementation status of properties, methods, and events for individual view types is listed under each type.");

				_sb.AppendLine("This document has been automatically generated based on whether the type (member, etc) is present in authored code and, if so, whether it is marked with the `[NotImplemented]` attribute. ");

				_sb.AppendParagraph($"If you notice incorrect or incomplete information here, please open an {MarkdownStringBuilder.Hyperlink("issue", "https://github.com/nventive/Uno/issues")}.");

				using (_sb.Section("Implemented - all platforms (iOS, Android, WebAssembly, MacOS)"))
				{
					AppendTypes(ps => ps.ImplementedForMain == ImplementedFor.Main, true);
				}
				using (_sb.Section("Implemented - Android + iOS only"))
				{
					AppendTypes(ps => ps.ImplementedForMain == ImplementedFor.Mobile, true);
				}
				using (_sb.Section("Implemented - select platforms")) //These all seem to be lies
				{
					using (_sb.Table("Type", "Supported platforms"))
					{
						foreach (var view in _views)
						{
							if (view.ImplementedForMain != ImplementedFor.Main && view.ImplementedFor != ImplementedFor.Mobile && view.ImplementedFor != ImplementedFor.None)
							{
								_sb.AppendRow(view.UAPSymbol.ToDisplayString(), ToDisplayString(view.ImplementedForMain));
							}
						}
					}
				}
				using (_sb.Section("Not yet implemented"))
				{
					_sb.AppendParagraph($"If there's a specific control you'd like to see implemented, {MarkdownStringBuilder.Hyperlink("create an issue!", "https://github.com/nventive/Uno/issues")}");

					AppendTypes(ps => ps.ImplementedForMain == ImplementedFor.None, false);
				}
			}
			using (var fileWriter = new StreamWriter(Path.Combine(DocPath, ImplementedViewsFileName)))
			{
				fileWriter.Write(_sb.ToString());
			}

			BuildMemberLists();

			void BuildMemberLists()
			{

				foreach (var group in _viewsGrouped)
				{
					if (group.All(ps => ps.ImplementedForMain == ImplementedFor.None))
					{
						continue;
					}

					_sb = new MarkdownStringBuilder();

					_sb.AppendComment($"*** This file has been generated by {typeof(DocGenerator).FullName}, do not edit it manually. ***");

					var currentNamespace = group.Key.ToDisplayString();
					using (_sb.Section($"Implemented members by control - {currentNamespace}"))
					{
						_sb.AppendParagraph($"This document lists which individual properties, methods, and events are implemented and not implemented per control in the namespace {currentNamespace}.");

						foreach (var view in group.Where(ps => ps.ImplementedForMain != ImplementedFor.None).OrderBy(ps => ps.UAPSymbol.Name))
						{
							using (_sb.Section($"{view.UAPSymbol.Name} : {ConstructBaseClassString(view)}"))
							{
								_sb.AppendParagraph($"*Implemented for:* {ToDisplayString(view.ImplementedForMain)}");

								var properties = view.UAPSymbol.GetMembers().OfType<IPropertySymbol>().Select(p => GetAllMatchingPropertyMember(view, p)).ToArray();
								var methods = view.UAPSymbol.GetMembers().OfType<IMethodSymbol>().Where(m => m.MethodKind == MethodKind.Ordinary).Select(m => GetAllMatchingMethods(view, m)).ToArray();
								var events = view.UAPSymbol.GetMembers().OfType<IEventSymbol>().Select(e => GetAllMatchingEvents(view, e)).ToArray();

								AppendImplementedMembers("properties", properties);
								AppendImplementedMembers("methods", methods);
								AppendImplementedMembers("events", events);

								_sb.AppendHorizontalRule();

								AppendNotImplementedMembers("properties", properties);
								AppendNotImplementedMembers("methods", methods);
								AppendNotImplementedMembers("events", events);

								_sb.AppendHorizontalRule();

								void AppendImplementedMembers<T>(string memberType, IEnumerable<PlatformSymbols<T>> members) where T : ISymbol
								{
									var implemented = members.Where(ps => ps.ImplementedForMain != ImplementedFor.None);
									if (implemented.None())
									{
										return;
									}
									_sb.AppendLine($"**Implemented {memberType}:** ");
									foreach (var member in implemented)
									{
										var implementedQualifier = member.ImplementedForMain != ImplementedFor.Main ? $" *({ToDisplayString(member.ImplementedForMain)})* " : "";
										_sb.Append($"{member.UAPSymbol.ToDisplayString(DisplayFormat)}{implementedQualifier}; ");
									}
									_sb.AppendParagraph();
								}

								void AppendNotImplementedMembers<T>(string memberType, IEnumerable<PlatformSymbols<T>> members) where T : ISymbol
								{
									var notImplemented = members.Where(ps => ps.ImplementedForMain != ImplementedFor.Main);
									if (notImplemented.None())
									{
										return;
									}
									_sb.AppendLine($"**Not implemented {memberType}:** ");
									foreach (var member in notImplemented)
									{
										var notImplementedQualifier = member.ImplementedForMain != ImplementedFor.None ? $" *({ToDisplayString(member.ImplementedForMain ^ ImplementedFor.Main)})* " : "";
										_sb.Append($"{member.UAPSymbol.ToDisplayString(DisplayFormat)}{notImplementedQualifier}; ");
									}
									_sb.AppendParagraph();
								}
							}
						}
					}


					using (var fileWriter = new StreamWriter(Path.Combine(DocPath, GetImplementedMembersFilename(group.Key))))
					{
						fileWriter.Write(_sb.ToString());
					}
				}
			}

			void AppendTypes(Func<PlatformSymbols<INamedTypeSymbol>, bool> appendCondition, bool showLinks)
			{
				_sb.AppendLine();
				foreach (var group in _viewsGrouped)
				{
					if (group.None(appendCondition))
					{
						continue;
					}

					if (showLinks)
					{
						using (_sb.Table(group.Key.ToDisplayString(), "", ""))
						{
							foreach (var type in group.Where(appendCondition).OrderBy(ps => ps.UAPSymbol.Name))
							{
								_sb.AppendRow(type.UAPSymbol.Name, MarkdownStringBuilder.Hyperlink("properties, methods, events", $"{GetImplementedMembersFilename(group.Key)}#{type.UAPSymbol.Name.ToLowerInvariant()}"), MarkdownStringBuilder.Hyperlink("uwp doc", @"https://docs.microsoft.com/en-us/uwp/api/" + type.UAPSymbol.ToDisplayString().ToLowerInvariant()));
							}
						}
					}
					else
					{
						using (_sb.Table(group.Key.ToDisplayString(), "", ""))
						{
							_sb.AppendCells(group.Where(appendCondition).Select(ps => ps.UAPSymbol.Name).OrderBy(n => n).ToList());
						}
					}
				};
			}
		}

		protected override void ProcessType(INamedTypeSymbol type, INamespaceSymbol ns)
		{
			var allSymbols = GetAllSymbols(type);
			if (IsViewType(type))
			{
				_views.Add(allSymbols);
			}
		}

		/// <summary>
		/// Check whether a type from the UWP assembly is a view.
		/// </summary>
		/// <returns>True if the type inherits from UIElement.</returns>
		private bool IsViewType(INamedTypeSymbol type)
		{
			if (type == null)
			{
				return false;
			}

			if (type == UIElementSymbol)
			{
				return true;
			}

			return IsViewType(type.BaseType);
		}

		private string ConstructBaseClassString(PlatformSymbols<INamedTypeSymbol> view)
		{
			var uniqueBaseTypes = AllSymbols()
				.Where(s => s.Symbol != null)
				.Select(s => (s.Symbol.BaseType.Name, s.Symbol.BaseType.ContainingNamespace.ToDisplayString()))
				.Distinct()
				.ToArray();
			if (uniqueBaseTypes.Length == 1)
			{
				var tuple = uniqueBaseTypes.Single();
				return MarkdownStringBuilder.Hyperlink(tuple.Item1, GetLinkTarget(tuple));
			}
			else
			{
				var output = "";
				foreach (var tuple in uniqueBaseTypes)
				{
					var link = GetLinkTarget(tuple);
					var name = link != null ?
						MarkdownStringBuilder.Hyperlink(tuple.Item1, link) :
						tuple.Item1;
					var matchingPlatforms = AllSymbols()
						.Where(s => s.Symbol != null)
						.Where(s => s.Symbol.BaseType.Name == tuple.Item1 && s.Symbol.BaseType.ContainingNamespace.ToDisplayString() == tuple.Item2)
						.Select(t => ToDisplayString(t.ImplementedFor));
					output += $"{name} ({matchingPlatforms.JoinBy(@"/")}) ";
				}

				return output;
			}

			string GetLinkTarget((string symbolName, string symbolNamespace) tuple)
			{
				if (tuple.symbolNamespace == view.UAPSymbol.ContainingNamespace.ToDisplayString())
				{
					return $"#{tuple.symbolName}";
				}
				else if (_kosherFrameworkViews.Contains(tuple))
				{
					return $"{GetImplementedMembersFilename(tuple.symbolNamespace)}#{tuple.symbolName}";
				}
				else
				{
					return null;
				}
			}

			IEnumerable<(INamedTypeSymbol Symbol, ImplementedFor ImplementedFor)> AllSymbols()
			{
				yield return (view.UAPSymbol, ImplementedFor.UAP);
				yield return (view.AndroidSymbol, ImplementedFor.Android);
				yield return (view.IOSSymbol, ImplementedFor.iOS);
				yield return (view.WasmSymbol, ImplementedFor.WASM);
				yield return (view.MacOSSymbol, ImplementedFor.MacOS);
			}
		}

		private static IGrouping<INamespaceSymbol, PlatformSymbols<INamedTypeSymbol>>[] GroupByNamespace(IEnumerable<PlatformSymbols<INamedTypeSymbol>> types)
		{
			return types.GroupBy(t => t.UAPSymbol.ContainingNamespace)
				.OrderBy(g => g.Key.ToDisplayString())
				.ToArray();
		}

		private static string GetImplementedMembersFilename(INamespaceSymbol namespaceSymbol)
		{
			return GetImplementedMembersFilename(namespaceSymbol.ToDisplayString());
		}

		private static string GetImplementedMembersFilename(string namespaceString)
		{
			return $"{ImplementedMembersPrefix}{namespaceString.ToLowerInvariant().Replace('.', '-')}.md";
		}

		private static SymbolDisplayFormat DisplayFormat { get; } = new SymbolDisplayFormat(SymbolDisplayGlobalNamespaceStyle.Omitted, SymbolDisplayTypeQualificationStyle.NameAndContainingTypes, SymbolDisplayGenericsOptions.IncludeTypeParameters, SymbolDisplayMemberOptions.IncludeParameters | SymbolDisplayMemberOptions.IncludeType, SymbolDisplayDelegateStyle.NameAndSignature, SymbolDisplayExtensionMethodStyle.Default, SymbolDisplayParameterOptions.IncludeType, SymbolDisplayPropertyStyle.NameOnly, SymbolDisplayLocalOptions.None, SymbolDisplayKindOptions.None, SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName);

		private static string ToDisplayString(ImplementedFor implementedFor)
		{
			switch (implementedFor)
			{
				case ImplementedFor.Main:
					return "all platforms";
				case ImplementedFor.Mobile:
					return "Android, iOS";
				case ImplementedFor.Xamarin:
					return "Android, iOS, MacOS";
				case ImplementedFor.UAP:
					return "UWP";
				case (ImplementedFor.Mobile | ImplementedFor.WASM):
					return "Android, iOS, WASM";
				default:
					return implementedFor.ToString();
			}
		}
	}
}
