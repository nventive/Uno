#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Globalization;
using System.Xml;
using Uno.Roslyn;
using Microsoft.CodeAnalysis;
using Uno.Extensions;
using Uno.Logging;
using Uno.UI.SourceGenerators.Telemetry;
using Uno.UI.Xaml;
using Uno.UI.SourceGenerators.Helpers;

#if NETFRAMEWORK
using Microsoft.Build.Execution;
using Uno.SourceGeneration;
using GeneratorExecutionContext = Uno.SourceGeneration.GeneratorExecutionContext;
#endif

namespace Uno.UI.SourceGenerators.DrawableLookup
{
	[Generator]
	public class DrawableLookupGenerator : ISourceGenerator
	{
		private List<IFieldSymbol>? _drawableSymbols;
		private string? _rootNamespace;

		public void Initialize(GeneratorInitializationContext context)
		{
		}

		public void Execute(GeneratorExecutionContext context)
		{

			if (!PlatformHelper.IsAndroid(context))
			{
				return;
			}

			_rootNamespace = context.GetMSBuildPropertyValue("RootNamespace");
			var resource = context.Compilation.GetTypeByMetadataName($"{_rootNamespace}.Resource");
			this.Log().Warn($"Root Namespace is {_rootNamespace}");
			this.Log().Warn($"Is Resource null? {resource == null}");

			foreach (var typeMember in resource?.GetTypeMembers() ?? Enumerable.Empty<INamedTypeSymbol>())
			{
				this.Log().Warn($"Resource type member: {typeMember.Name}");
			}

			_drawableSymbols = resource?.GetTypeMembers()
				.FirstOrDefault(x => x.Name == "Drawable")
				.GetFields()
				.Where(x => x.IsConst)
				.ToList();

			context.AddSource("DrawableLookup", GenerateLookupClass());
		}

		private string GenerateLookupClass()
		{
			var writer = new IndentedStringBuilder();

			writer.AppendLineInvariant("// <autogenerated />");
			writer.AppendLineInvariant("#if __ANDROID__");
			writer.AppendLineInvariant("using System.Collections.Generic;");
			writer.AppendLineInvariant("");

			using (writer.BlockInvariant($"namespace {_rootNamespace}"))
			{
				using (writer.BlockInvariant("public partial class Resource"))
				{
					using (writer.BlockInvariant("public partial class Drawable"))
					{
						using (writer.BlockInvariant("public static Dictionary<string, int> GetDrawableMap()"))
						{
							using (writer.BlockInvariant("return new Dictionary<string, int>"))
							{
								foreach (var drawableSymbol in _drawableSymbols.Safe())
								{
									using (writer.BlockInvariant(""))
									{
										writer.AppendLineInvariant("\"{0}\", {1}", drawableSymbol.Name, drawableSymbol.ConstantValue);

									}
									writer.Append(",");
								}
							}
							writer.Append(";");
						}
					}
				}
			}
			writer.AppendLineInvariant("#endif");

			return writer.ToString();
		}
	}
}
